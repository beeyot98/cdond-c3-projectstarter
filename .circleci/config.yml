version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}

  revert-migrations:
    description: Revert the last migration    
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/XoQ4VsgTqsH1t2BLSAQQE4/migration_${CIRCLE_WORKFLOW_ID:0:5})
                if (( $SUCCESS == 1 ));

                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                else
                  echo 'no migration rollback required'
                fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
    
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
            --tags project=udapeople 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
            --tags project=udapeople  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch ~/inventory
            echo [all] > ~/inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls ~/     

      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment
      - revert-migrations

        
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["89:f5:44:d3:00:0f:2f:e0:29:ee:57:ed:ce:fe:5f:79"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
          when: on_fail

      - destroy-environment
      - revert-migrations

  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to KVDB
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              echo "Migration successful. Upload status to KVDB"
              curl -k https://kvdb.io/XoQ4VsgTqsH1t2BLSAQQE4/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            else
              echo "Migration did not take place"
            fi
      
      - destroy-environment
      - revert-migrations

  
  deploy-frontend:
    docker: 
      - image: python:3.11-rc-alpine 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/   
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install nodejs, npm, gzip and tar
          command: |
            apk add --update nodejs npm gzip tar curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Backend URL is:  ${API_URL}"
            echo ENVIRONMENT=production > frontend/.env   
            echo NODE_ENV=production >> frontend/.env
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            if [[ ! -z "${API_URL}" ]]
              then
                echo "uploading $API_URL to kvdb"
                curl -k "https://kvdb.io/XoQ4VsgTqsH1t2BLSAQQE4/backend_api_url_${CIRCLE_WORKFLOW_ID:0:5}" -d "${API_URL}"
              else
                echo "API_KEY check failed in if condition"
                exit 1
            fi
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - destroy-environment
      - revert-migrations
      

  
  deploy-backend:
    docker: 
      - image: python:3.11-rc-alpine
    
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["89:f5:44:d3:00:0f:2f:e0:29:ee:57:ed:ce:fe:5f:79"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install nodejs, npm, gzip, curl and tar
          command: |
            apk add --update nodejs npm gzip tar openssh curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf ~/artifact.tar.gz .
            echo "list tar file in home"
            ls ~/
            cd .circleci/ansible
            export TARGET_IP=$(grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' inventory.txt)
            ssh-keyscan ${TARGET_IP} >> ~/.ssh/known_hosts
            scp ~/artifact.tar.gz ubuntu@${TARGET_IP}:/tmp
            ls
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            # start ansible playbook to deploy back end services
            ansible-playbook -i inventory.txt deploy-backend.yml
            #add wait for server to be fully ready
            sleep 25
      - destroy-environment
      - revert-migrations
        


  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            apk add --update aws-cli
      - run:
          name: Install curl
          command: |
            apk add --update curl
      - run:
          name: Backend smoke test
          command: |
              export API_URL=$(curl -k "https://kvdb.io/XoQ4VsgTqsH1t2BLSAQQE4/backend_api_url_${CIRCLE_WORKFLOW_ID:0:5}")
              echo "${API_URL}"
              sleep 25
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

      
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Store old workflowID for future reference
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Workflow ID: ${OldWorkflowID}"
            # Upload old workflowID to KVDB
            curl -k "https://kvdb.io/XoQ4VsgTqsH1t2BLSAQQE4/oldworkflowID" -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople


  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Cleanup previous deployment stacks
          command: |
            # Fetch OldWorkflowID from KVDB
            export OldWorkflowID=$(curl -k "https://kvdb.io/XoQ4VsgTqsH1t2BLSAQQE4/oldworkflowID")
            echo 'export OldWorkflowID1="${OldWorkflowID}"' >> "$BASH_ENV"
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:5}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            # Clear old deployments
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi



     
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:  [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]



   
